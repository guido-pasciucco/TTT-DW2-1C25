/* 
CLASE 5 - 7/5

- ‚úÖ COLECCIONES DE DATOS
    - ‚úÖ ARRAYS
    - üîú OBJETOS (la clase que viene)
- BUCLES
    - ‚úÖ 2 ramificaciones - FOR Y WHILE
    - ‚úÖ FOR
    - ‚úÖ Variaci√≥n FOR tradicional para leer arrays (deprecado)
    - ‚úÖ FOR IN
    - ‚úÖ .forEach()
    - ‚úÖ WHILE
    - ‚úÖ DO WHILE

    - ‚úÖ BREAK 5 MINUTOS

    - REPASO TEMAS Y CLASES ANTERIORES
        - PIENSEN TEMAS QUE QUIERAN REPASAR, LOS ESCRIBEN EN EL CHAT Y LOS REPASAMOS.

        - funciones 00
            - return
        - git 00
            - crear un repo local y sincronizarlo con uno remoto



    - RESOLUCI√ìN DE DESAF√çOS OBLIGATORIOS (2, 4 y 5)
    - Hoy, quien pueda, afterClass
    - VIERNES 9 A 13HS - "GUARDIA" DE DUDAS Y CONSULTAS


*/

// COLECCI√ìN DE DATOS
/* nos permite almacenar en un √∫nico espacio en memoria (en una sola variable), varios datos ordenados de alg√∫n modo */

/* VARIABLES Y CONSTANTES - LIMITACI√ìN > SOLO SE PUEDE ALMACENAR 1 DATO
ARRAYS / LISTAS / ARREGLOS - 3, 5, 10, 400 DATOS EN UNA √öNICA VARIABLE
*/



// aplicando arrays
let nombres = ["Marcos", "Lucia", "Gabriel", "Marcela", "Martina"]
// posici√≥n         0        1       2
// elemento         1        2       3

// la posici√≥n SIEMPRE SE CUENTA DESDE 0

// c√≥mo se organizan los datos dentro de esta colecci√≥n?
/* posici√≥n - organizaci√≥n es secuencial -  */

// llamo a todos los elementos del array - al array completo
/* console.log(nombres) */

// llamo a solamente un elemento del array, lo llamo por su POSICI√ìN
/* console.log(nombres[0]) */


/* LOS ARRAYS TIENEN TODO UN MEN√ö DE M√âTODOS NATIVOS DE JS PARA MANIPULARLOS */

/* 
AGREGA UN DATO
    unshift - al principio del array
    push - al final del array

ELIMINA UN DATO
    shift - al principio del array
    pop - al final del array
*/
/* nombres.unshift("Carlos")
nombres.push("Guido")
nombres.shift()
nombres.pop() */


// BUCLES - CICLOS

/* Estructuras de control de flujo que nos permiten repetir c√≥digo y ahorrar lineas de codigo en el proceso */


// for - se basan en la iteraci√≥n

// quiero repetirlo 5 veces

/* 
    for (inicio, fin, actualizacion){
        bloque de c√≥digo a repetir
    } 
*/

/* for(let i = 1; i <= 5 ; i++){
    console.log("Hola mundo!")
} */


// FOR IN - Ciclo
// quiero repetir el console log POR CADA NOMBRE EN EL ARRAY DE NOMBRES

// forma vieja de lograrlo - no la recomiendo
/* for(let i = 0; i < nombres.length ; i++){
    console.log(`Hola ${nombres[i]}`)
} */

// forma actual de lograrlo - for...in

// por cada nombre en el array de nombres...
// gener√° el console log saludando

/* for (let i in nombres) {
    console.log(`Hola ${nombres[i]}`)
} */

// forEach - m√©todo para arrays de JS que funciona como un ciclo

/* console.log(nombres.forEach(
    (i)=> console.log(`Hola ${i}`)
)) */

// WHILE -------------------------------------

/* 
    LOS CICLOS WHILE SE BASAN EN EL CUMPLIMIENTO O NO DE UNA CONDICI√ìN.

    EN LOS BUCLES WHILE NOSOTROS ESTABLECEMOS UNA CONDICI√ìN
        - MIENTRAS ESA CONDICI√ìN SE CUMPLA, EL BLOQUE DE C√ìDIGO DE NUESTRO WHILE SE VA A EJECUTAR
        - CUANDO DEJE DE SER TRUE LA CONDICI√ìN, YA NO SE EJECUTA M√ÅS EL BLOQUE DE C√ìDIGO DEL WHILE
        - SUPER IMPORTANTE: EVITAR BUCLES INFINITOS. (CUANDO LA CONDICI√ìN SIEMPRE ES TRUE.) CUANDO YO TRABAJO UN BUCLE WHILE, TENGO QUE ASEGURARME DE QUE EN ALG√öN MOMENTO LA CONDICI√ìN VA A SER FALSE.
*/

let numero = 26

// WHILE    - SE EJECUTA CERO O M√ÅS VECES - PUEDE NUNCA EJECUTARSE.
// WHILE - SIEMPRE SE COMPRUEBA LA CONDICI√ìN PRIMERO

console.log("Hola while")
while (numero <= 5){
    console.log("El n√∫mero es: " + numero)
    numero++
}
console.log("Chau")


// DO WHILE - SE EJECUTA UNA O M√ÅS VECES - SI O SI SE EJECUTA LA 1RA VEZ.
// DO WHILE - LA 1ER VUELTA OCURRE ANTES DE LA 1RA COMPROBACI√ìN

console.log("Hola do while")
do{
    console.log("El n√∫mero es: " + numero)
    numero++
}while (numero <= 5)
console.log("Chau")